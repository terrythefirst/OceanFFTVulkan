#version 430 core
#define M_PI 3.1415926535897932384626433832795//定义圆周率 PI 的近似值为宏

layout (local_size_x = 1, local_size_y = 1) in;//输入布局限定符

layout( std140, binding=0 )  writeonly buffer dataBuffer{  
	vec4 tilde_hkt_dy[ ]; //高度(Y 轴)数据数组
};
layout( std140, binding=1 )  writeonly buffer dataBuffer1{
	vec4 tilde_hkt_dx[ ];  //X 轴扰动数据数组
};
layout( std140, binding=2 )  writeonly buffer dataBuffer2{
	vec4 tilde_hkt_dz[ ];  //Z 轴扰动数据数组
};

layout( std140, binding=3 )  readonly buffer dataBuffer3{
	vec4 tilde_h0kh0minusk[ ]; //h0(k)与 h0(-k)数据数组
};

layout(binding = 4, set = 0) uniform UniformBufferObject {//一致缓冲（包含时间变量）
	float t;
} ubo;

layout (push_constant) uniform pushConstants{//推送常量块
	int N;//FFT 计算的尺寸
	int L;//fftL 常量
} constants;

struct complex
{	
	float real;
	float im;
};

complex mul(complex c0, complex c1)
{
	complex c;
	c.real = c0.real * c1.real - c0.im * c1.im;
	c.im   = c0.real * c1.im + c0.im * c1.real;
	return c;
}

complex add(complex c0, complex c1)
{
	complex c;
	c.real = c0.real + c1.real;
	c.im   = c0.im   + c1.im;
	return c;
}

complex conj(complex c)
{
	complex c_conj = complex(c.real, -c.im);
	
	return c_conj;
}

void main(void)//主函数
{
	vec2 x = ivec2(gl_WorkGroupID.xy) - float(constants.N)/2.0;//根据坐标求 h0(k)方程中的 k 时的中间变量
	uint index = gl_NumWorkGroups.x*gl_WorkGroupID.y+gl_WorkGroupID.x; //计算顶点的索引
	vec2 k = vec2(2.0 * M_PI * x.x/constants.L, 2.0 * M_PI * x.y/constants.L);//根据公式求 k
	
	float magnitude = length(k);//求 k 的模
	if (magnitude < 0.00001) magnitude = 0.00001;//避免计算溢出
	
	float w = sqrt(9.81 * magnitude);//根据公式求 w
	
	complex fourier_amp 		= complex(tilde_h0kh0minusk[index].r, tilde_h0kh0minusk[index].g);//转换为复数 h0(k)变量
	
	complex fourier_amp_conj	= conj(complex(tilde_h0kh0minusk[index].b,tilde_h0kh0minusk[index].w));//转换为复数 h0(-k)变量
		
	float cosinus = cos(w*ubo.t);//暂存计算中间值（余弦）
	float sinus   = sin(w*ubo.t);//暂存计算中间值（正弦）
		

	complex exp_iwt = complex(cosinus, sinus);//通过欧拉公式得到 h0(k)的三角系数
	complex exp_iwt_inv = complex(cosinus, -sinus);//通过欧拉公式得到 h0(-k)的三角系数
	

	complex h_k_t_dy = add(mul(fourier_amp, exp_iwt), (mul(fourier_amp_conj, exp_iwt_inv)));//求高度的 h(k,t)
	

	complex dx = complex(0.0,-k.x/magnitude);// X 轴扰动相对于高度的 dx
	complex h_k_t_dx = mul(dx, h_k_t_dy);//求 X 轴扰动的 h(k,t)
	

	complex dy = complex(0.0,-k.y/magnitude);//Z 轴扰动相对于高度的 dz
	complex h_k_t_dz = mul(dy, h_k_t_dy);//求 Z 轴扰动的 h(k,t)
		
	tilde_hkt_dy[index] =  vec4(h_k_t_dy.real, h_k_t_dy.im,0,0);//保存高度的 h(k,t)
	tilde_hkt_dx[index] =  vec4(h_k_t_dx.real, h_k_t_dx.im,0,0);//保存 X 轴扰动的 h(k,t)
	tilde_hkt_dz[index] =  vec4(h_k_t_dz.real, h_k_t_dz.im,0,0);//保存 Z 轴扰动的 h(k,t)
}
