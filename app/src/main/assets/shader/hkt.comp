#version 430 core
#define M_PI 3.1415926535897932384626433832795

layout (local_size_x = 1, local_size_y = 1) in;

layout( std140, binding=0 )  writeonly buffer dataFrom{  //height displacement
	vec4 tilde_hkt_dy[ ]; //原始顶点数据数组
};
layout( std140, binding=1 )  writeonly buffer dataFrom1{ //choppy-x displacement
	vec4 tilde_hkt_dx[ ]; //原始顶点数据数组
};
layout( std140, binding=2 )  writeonly buffer dataFrom2{ //choppy-z displacement
	vec4 tilde_hkt_dz[ ]; //原始顶点数据数组
};

layout( std140, binding=3 )  readonly buffer dataFrom3{ //原始顶点数据缓冲
	vec4 tilde_h0kh0minusk[ ]; //原始顶点数据数组
};

layout(binding = 4, set = 0) uniform UniformBufferObject {
	float t;
} ubo;

layout (push_constant) uniform pushConstants{
	int N;
	int L;
} constants;

struct complex
{
	float real;
	float im;
};

complex mul(complex c0, complex c1)
{
	complex c;
	c.real = c0.real * c1.real - c0.im * c1.im;
	c.im   = c0.real * c1.im + c0.im * c1.real;
	return c;
}

complex add(complex c0, complex c1)
{
	complex c;
	c.real = c0.real + c1.real;
	c.im   = c0.im   + c1.im;
	return c;
}

complex conj(complex c)
{
	complex c_conj = complex(c.real, -c.im);

	return c_conj;
}

void main(void)
{
	vec2 x = ivec2(gl_WorkGroupID.xy) - float(constants.N)/2.0;
	uint index = gl_NumWorkGroups.x*gl_WorkGroupID.y+gl_WorkGroupID.x;
	vec2 k = vec2(2.0 * M_PI * x.x/constants.L, 2.0 * M_PI * x.y/constants.L);

	float magnitude = length(k);
	if (magnitude < 0.00001) magnitude = 0.00001;

	float w = sqrt(9.81 * magnitude);

	complex fourier_amp 		= complex(tilde_h0kh0minusk[index].r, tilde_h0kh0minusk[index].g);

	complex fourier_amp_conj	= conj(complex(tilde_h0kh0minusk[index].b,tilde_h0kh0minusk[index].w));

	float cosinus = cos(w*ubo.t);
	float sinus   = sin(w*ubo.t);

	//欧拉公式
	complex exp_iwt = complex(cosinus, sinus);
	complex exp_iwt_inv = complex(cosinus, -sinus);
	
	// dy
	complex h_k_t_dy = add(mul(fourier_amp, exp_iwt), (mul(fourier_amp_conj, exp_iwt_inv)));
	
	// dx
	complex dx = complex(0.0,-k.x/magnitude);
	complex h_k_t_dx = mul(dx, h_k_t_dy);
	
	// dz
	complex dy = complex(0.0,-k.y/magnitude);
	complex h_k_t_dz = mul(dy, h_k_t_dy);
		
	tilde_hkt_dy[index] =  vec4(h_k_t_dy.real, h_k_t_dy.im,0,0);
	tilde_hkt_dx[index] =  vec4(h_k_t_dx.real, h_k_t_dx.im,0,0);
	tilde_hkt_dz[index] =  vec4(h_k_t_dz.real, h_k_t_dz.im,0,0);
}
