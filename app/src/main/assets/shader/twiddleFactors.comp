#version 430 core
#extension GL_ARB_separate_shader_objects : enable
#define M_PI 3.1415926535897932384626433832795

layout (local_size_x = 1, local_size_y = 1) in;

layout( std140, binding=0 ) writeonly buffer dataFrom1{ //原始顶点数据缓冲
	vec4 twiddleIndices[ ]; //原始顶点数据数组
};

layout (std430, binding = 1) buffer indices {
	int j[];
} bit_reversed;

layout (push_constant) uniform pushConstants{
	int n;
} uniforms;

struct complex
{
	float real;
	float im;
};

void main(void)
{
	vec2 x = gl_WorkGroupID.xy;
	float k = mod(x.y * (float(uniforms.n)/ pow(2,x.x+1)), uniforms.n);
	complex twiddle = complex( cos(2.0*M_PI*k/float(uniforms.n)), sin(2.0*M_PI*k/float(uniforms.n)));

	int butterflyspan = int(pow(2, x.x));

	int butterflywing;

	if (mod(x.y, pow(2, x.x + 1)) < pow(2, x.x))
		butterflywing = 1;
	else butterflywing = 0;

	uint indexTemp=gl_NumWorkGroups.x*gl_WorkGroupID.y+gl_WorkGroupID.x; //计算顶点的索引
	// first stage, bit reversed indices
	if (x.x == 0) {
		// top butterfly wing
		if (butterflywing == 1)
			twiddleIndices[indexTemp] = vec4(twiddle.real, twiddle.im, bit_reversed.j[int(x.y)], bit_reversed.j[int(x.y + 1)]);
		// bot butterfly wing
		else	
			twiddleIndices[indexTemp] = vec4(twiddle.real, twiddle.im, bit_reversed.j[int(x.y - 1)], bit_reversed.j[int(x.y)]);
	}
	// second to log2(uniforms.n) stage
	else {
		// top butterfly wing
		if (butterflywing == 1)
			twiddleIndices[indexTemp] = vec4(twiddle.real, twiddle.im, x.y, x.y + butterflyspan);
		// bot butterfly wing
		else
			twiddleIndices[indexTemp] = vec4(twiddle.real, twiddle.im, x.y - butterflyspan, x.y);
	}
}

