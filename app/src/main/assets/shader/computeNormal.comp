#version 450
#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable
struct myVert{ //用于表示顶点数据的结构体
	vec4 a; //前四个分量
	vec4 b; //后四个分量
};
layout( std140, binding=0 ) buffer dataFromTo{ //顶点数据缓冲
	myVert vertsFromTo[ ]; //顶点数据数组
};
layout( local_size_x = 1, local_size_y = 1, local_size_z = 1 ) in; //输入布局限定符
vec3 calNormal(vec3 a,vec3 b,vec3 c){ //计算三角形面法向量的方法
	vec3 vab=b-a; //计算a 点到b 点的向量
	vec3 vac=c-a; //计算a 点到c 点的向量
return normalize(cross(vab,vac)); //返回结果法向量值
}
vec3 getSpecPosition(uint indexIn){ //获取指定编号顶点坐标的方法
	return vertsFromTo[indexIn].a.xyz; //返回指定编号顶点的坐标
}
void addSpecNormal(vec3 normalIn,uint indexIn){ //叠加指定编号顶点法向量的方法
	if(vertsFromTo[indexIn].b.yzw != vec3(0,0,0))
		vertsFromTo[indexIn].b.yzw=normalize(normalize(vertsFromTo[indexIn].b.yzw)+ normalize(normalIn)); //叠加指定编号顶点的法向量
	else vertsFromTo[indexIn].b.yzw= normalize(normalIn); //叠加指定编号顶点的法向量
}
void main(){
    uint indexTemp=gl_NumWorkGroups.x*gl_WorkGroupID.y+gl_WorkGroupID.x;//计算顶点的索引
    if(gl_WorkGroupID.x<(gl_NumWorkGroups.x-uint(1)) //若当前顶点不是最后一列，且不是最后一行
		&&gl_WorkGroupID.y<(gl_NumWorkGroups.y-uint(1))){
		//三角形顶点编号指南
		//0---1
		//| / |
		//3---2
		vec3 a=getSpecPosition(indexTemp); //0 号点坐标
		vec3 b=getSpecPosition(indexTemp+gl_NumWorkGroups.x); //3 号点坐标
		vec3 c=getSpecPosition(indexTemp+uint(1)); //1 号点坐标
		vec3 normal=calNormal(a,b,c); //计算0-3-1 三角形面的法向量
		addSpecNormal(normal,indexTemp); //给三个顶点叠加法向量
		addSpecNormal(normal,indexTemp+gl_NumWorkGroups.x);
		addSpecNormal(normal,indexTemp+uint(1));

		//计算1-3-2三角形法向量
		//逆时针a点
		a=getSpecPosition(indexTemp+uint(1));
		//逆时针b点
		b=getSpecPosition(indexTemp+gl_NumWorkGroups.x);
		//逆时针c点
		c=getSpecPosition(indexTemp+gl_NumWorkGroups.x+uint(1));
		//计算此三角形法向量
		normal=calNormal(a,b,c);
		//给三个顶点叠加法向量
		addSpecNormal(normal,indexTemp+uint(1));
		addSpecNormal(normal,indexTemp+gl_NumWorkGroups.x);
		addSpecNormal(normal,indexTemp+uint(1)+gl_NumWorkGroups.x);
    }
}
